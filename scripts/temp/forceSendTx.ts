import { ethers } from "ethers";

// RPC endpoint URL
const rpcUrl = "https://nd-829-997-700.p2pify.com/790712c620e64556719c7c9f19ef56e3" // Arbitrum
// const rpcUrl = "https://base-mainnet.core.chainstack.com/e7aa01c976c532ebf8e2480a27f18278"; // base

// Create a provider
const provider = new ethers.JsonRpcProvider(rpcUrl);
const privateKey = process.env.PRIVATE_GAS_ESTIMATION!;
const wallet = new ethers.Wallet(privateKey, provider);

// The raw transaction data
const rawTx = {
    to: "0x5Ac1a18F1101A1D55b9C97326AE2A25160Ca5e8a", // Address of the receiver or contract
    value: 0, // Amount to send (for ETH transfers)
    data: "0x10c5772b000000000000000000000000eedfdd620629c7432970d22488124fc92ad6d426000000000000000000000000000000000000000000000000000000000007a120000000000000000000000000000000000000000000000000000000000007799e000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e5831000000000000000000000000fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9000000000000000000000000111111125421ca6dc452d289314280a0f8842a650000000000000000000000000000000000000000000000000000000000000160e13bc4534e0f31e862eed23dd82c810047aa90cb56d281ea8c6883fc9d95595200000000000000000000000000000000000000000000000000000000663f5f2d00000000000000000000000000000000000000000000000000000000000003c00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000022807ed2379000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd09000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e5831000000000000000000000000fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd09000000000000000000000000eedfdd620629c7432970d22488124fc92ad6d426000000000000000000000000000000000000000000000000000000000007a120000000000000000000000000000000000000000000000000000000000007799e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000c90000000000000000000000000000000000000000000000ab00007d00001a0020d6bdbf78af88d065e77c8cc2239327c5edb3a432268e583102a00000000000000000000000000000000000000000000000000000000000000001ee63c1e581be3ad6a5669dc0b8b12febc03608860c31e2eef6af88d065e77c8cc2239327c5edb3a432268e5831111111125421ca6dc452d289314280a0f8842a650020d6bdbf78fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9111111125421ca6dc452d289314280a0f8842a6500000000000000000000000000000000000000000000007c2ad3dd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041a11a5320583021443318baedf77ad42c307c017cb0be50f4fb2b95e6dca5e4c84bcdf314b766db5137c5cefaddd6758c020a49b51445e6135ba609ae83fee38c1c00000000000000000000000000000000000000000000000000000000000000", // Encoded contract call or empty for plain ETH transfer
    gasLimit: 1000000, // Maximum gas to spend
    gasPrice: 200000000, // Gas price in wei
};

console.log("Using wallet address: " + wallet.address);

async function sendTransaction() {
    try {
        console.log("Sending transaction...");
        const txResponse = await wallet.sendTransaction(rawTx);
        console.log("Transaction sent! Hash:", txResponse.hash);

        // Wait for the transaction to be mined
        const receipt = await txResponse.wait();
        console.log("Transaction confirmed in block:", receipt!.blockNumber);
    } catch (error) {
        console.error("Error sending transaction:", error);
    }
}

sendTransaction();

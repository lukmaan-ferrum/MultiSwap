import { ethers } from "ethers";

// RPC endpoint URL
const rpcUrl = "https://nd-829-997-700.p2pify.com/790712c620e64556719c7c9f19ef56e3" // Arbitrum
// const rpcUrl = "https://base-mainnet.core.chainstack.com/e7aa01c976c532ebf8e2480a27f18278"; // base

// Create a provider
const provider = new ethers.JsonRpcProvider(rpcUrl);
const privateKey = process.env.PRIVATE_GAS_ESTIMATION!;
const wallet = new ethers.Wallet(privateKey, provider);

// The raw transaction data
const rawTx = {
    to: "0x5Ac1a18F1101A1D55b9C97326AE2A25160Ca5e8a", // Address of the receiver or contract
    value: 0, // Amount to send (for ETH transfers)
    data: "0x10c5772b000000000000000000000000eedfdd620629c7432970d22488124fc92ad6d4260000000000000000000000000000000000000000000000000000000000030d4000000000000000000000000000000000000000000000000033033248d6716d2e000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e58310000000000000000000000009f6abbf0ba6b5bfa27f4deb6597cc6ec20573fda000000000000000000000000111111125421ca6dc452d289314280a0f8842a650000000000000000000000000000000000000000000000000000000000000160e3b7b53a9e81bebb328ded19f1917d5a75e9bcc62b19fc45fea67a286d6cb89200000000000000000000000000000000000000000000000000000000663f67f30000000000000000000000000000000000000000000000000000000000000440000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000002a807ed2379000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd09000000000000000000000000af88d065e77c8cc2239327c5edb3a432268e58310000000000000000000000009f6abbf0ba6b5bfa27f4deb6597cc6ec20573fda000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd09000000000000000000000000eedfdd620629c7432970d22488124fc92ad6d4260000000000000000000000000000000000000000000000000000000000030d4000000000000000000000000000000000000000000000000033033248d6716d2e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000015400000000000000000000000000000000000000000000013600010800001a0020d6bdbf78af88d065e77c8cc2239327c5edb3a432268e583100a007e5c0d20000000000000000000000000000000000000000000000000000ca00006302a00000000000000000000000000000000000000000000000000000000000000001ee63c1e580b1026b8e7276e7ac75410f1fcbbe21796e8f7526af88d065e77c8cc2239327c5edb3a432268e58313fec70f319a4145eba17765ae0c64b2232fe5bae00206ae40711b8002dc6c03fec70f319a4145eba17765ae0c64b2232fe5bae111111125421ca6dc452d289314280a0f8842a65000000000000000000000000000000000000000000000000000000000000000182af49447d8a07e3bd95bd0d56f35241523fbab10020d6bdbf789f6abbf0ba6b5bfa27f4deb6597cc6ec20573fda111111125421ca6dc452d289314280a0f8842a650000000000000000000000007c2ad3dd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000410a0b913bbe4fcfa8d5de07c35df3bad5bf1169a1f566142824ccfed165d29a8762d5469f09b74f2e4342bc9ff3911cf9228f5406a7884c1d7491cdef6118541f1c00000000000000000000000000000000000000000000000000000000000000", // Encoded contract call or empty for plain ETH transfer
    gasLimit: 1000000, // Maximum gas to spend
    gasPrice: 200000000, // Gas price in wei
};

console.log("Using wallet address: " + wallet.address);

async function sendTransaction() {
    try {
        console.log("Sending transaction...");
        const txResponse = await wallet.sendTransaction(rawTx);
        console.log("Transaction sent! Hash:", txResponse.hash);

        // Wait for the transaction to be mined
        const receipt = await txResponse.wait();
        console.log("Transaction confirmed in block:", receipt!.blockNumber);
    } catch (error) {
        console.error("Error sending transaction:", error);
    }
}

sendTransaction();
